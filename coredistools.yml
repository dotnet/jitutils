pr:
  branches:
    include:
    - main
  paths:
    include:
    - eng/*
    - src/coredistools/*
    - build-coredistools.cmd
    - build-coredistools.sh
    - build-tblgen.cmd
    - coredistools.yml
    - pack-coredistools.cmd

trigger:
  branches:
    include:
    - main
  paths:
    include:
    - eng/*
    - src/coredistools/*
    - build-coredistools.cmd
    - build-coredistools.sh
    - build-tblgen.cmd
    - coredistools.yml
    - pack-coredistools.cmd

resources:
  containers:
  - container: ubuntu-18.04-arm
    image: mcr.microsoft.com/dotnet-buildtools/prereqs:ubuntu-18.04-cross-20220312201346-b9de666
  - container: ubuntu-18.04-arm64
    image: mcr.microsoft.com/dotnet-buildtools/prereqs:ubuntu-18.04-cross-arm64-20220312201346-b2c2436

variables:
  LLVMRepositoryUri: https://github.com/llvm/llvm-project.git
  LLVMSourceBundle: llvm-project.bundle
  LLVMSourceVersion: llvmorg-13.0.1

jobs:
- job: checkout_llvm
  displayName: Checkout LLVM

  pool:
    vmImage: macOS-latest

  workspace:
    clean: all

  steps:
  - checkout: none

  - script: git clone --depth 1 --branch $(LLVMSourceVersion) $(LLVMRepositoryUri) $(Build.SourcesDirectory)
    displayName: Checkout LLVM from Git

  - script: git bundle create $(Build.StagingDirectory)/$(LLVMSourceBundle) HEAD
    displayName: Create bundle

  - publish: $(Build.StagingDirectory)/$(LLVMSourceBundle)
    artifact: $(LLVMSourceBundle)
    displayName: Publish LLVM bundle

- job: crossbuild_coredistools_linux
  dependsOn: checkout_llvm
  displayName: Build coredistools Linux

  container: $[ variables['ContainerImage'] ]

  pool:
    vmImage: ubuntu-latest

  strategy:
    matrix:
      arm:
        ContainerImage: ubuntu-18.04-arm
        CrossRootfsDirectory: /crossrootfs/arm
        TargetOSArchitecture: linux-arm

      arm64:
        ContainerImage: ubuntu-18.04-arm64
        CrossRootfsDirectory: /crossrootfs/arm64
        TargetOSArchitecture: linux-arm64

  workspace:
    clean: all

  steps:
  - template: /eng/download-checkout-llvm.yml

  - template: /eng/download-llvm-release.yml
    parameters:
      os: linux
      release: $(LLVMSourceVersion)

  - script: ./build-coredistools.sh $(TargetOSArchitecture) $(CrossRootfsDirectory)
    displayName: Build coredistools

  - publish: $(Build.SourcesDirectory)/artifacts/$(TargetOSArchitecture)/bin/libcoredistools.so
    artifact: coredistools-$(TargetOSArchitecture)
    displayName: Publish coredistools

- job: build_coredistools_linux_x64
  dependsOn: checkout_llvm
  displayName: Build coredistools Linux x64

  pool:
    vmImage: ubuntu-18.04

  variables:
    TargetOSArchitecture: linux-x64

  workspace:
    clean: all

  steps:
  - template: /eng/download-checkout-llvm.yml

  - template: /eng/download-llvm-release.yml
    parameters:
      os: linux
      release: $(LLVMSourceVersion)

  - script: ./build-coredistools.sh $(TargetOSArchitecture)
    displayName: Build coredistools

  - publish: $(Build.SourcesDirectory)/artifacts/$(TargetOSArchitecture)/bin/libcoredistools.so
    artifact: coredistools-$(TargetOSArchitecture)
    displayName: Publish coredistools

- job: build_coredistools_macos
  dependsOn: checkout_llvm
  displayName: Build coredistools macOS

  pool:
    vmImage: $(VMImage)

  strategy:
    matrix:
      x64:
        TargetOSArchitecture: osx-x64
        VMImage: macOS-10.15
      arm64:
        TargetOSArchitecture: osx-arm64
        VMImage: macOS-11

  workspace:
    clean: all

  steps:
  - template: /eng/download-checkout-llvm.yml

  - template: /eng/download-llvm-release.yml
    parameters:
      os: macos
      release: $(LLVMSourceVersion)

  - script: ./build-coredistools.sh $(TargetOSArchitecture)
    displayName: Build coredistools

  - publish: $(Build.SourcesDirectory)/artifacts/$(TargetOSArchitecture)/bin/libcoredistools.dylib
    artifact: coredistools-$(TargetOSArchitecture)
    displayName: Publish coredistools

- job: build_tblgen_windows
  dependsOn: checkout_llvm
  displayName: Build llvm-tblgen Windows

  pool:
    vmImage: windows-latest

  workspace:
    clean: all

  steps:
  - template: /eng/download-checkout-llvm.yml

  - script: build-tblgen.cmd
    displayName: Build llvm-tblgen

  - publish: $(Build.SourcesDirectory)\bin\llvm-tblgen.exe
    artifact: tblgen-windows
    displayName: Publish llvm-tblgen

- job: build_coredistools_windows
  dependsOn:
  - checkout_llvm
  - build_tblgen_windows
  displayName: Build coredistools Windows

  pool:
    vmImage: windows-latest

  strategy:
    matrix:
      x64:
        TargetOSArchitecture: win-x64
      x86:
        TargetOSArchitecture: win-x86
      arm64:
        TargetOSArchitecture: win-arm64

  workspace:
    clean: all

  steps:
  - template: /eng/download-checkout-llvm.yml

  - download: current
    artifact: tblgen-windows
    displayName: Download llvm-tblgen

  - script: 'echo ##vso[task.prependpath]$(Pipeline.Workspace)\tblgen-windows'
    displayName: Add llvm-tblgen to the PATH

  - script: build-coredistools.cmd $(TargetOSArchitecture)
    displayName: Build coredistools

  - publish: $(Build.SourcesDirectory)\artifacts\$(TargetOSArchitecture)\bin\coredistools.dll
    artifact: coredistools-$(TargetOSArchitecture)
    displayName: Publish coredistools

- job: build_coredistools_nuget_packages
  dependsOn:
  - crossbuild_coredistools_linux
  - build_coredistools_linux_x64
  - build_coredistools_macos
  - build_coredistools_windows
  displayName: Build coredistools NuGet packages

  pool:
    vmImage: windows-latest

  workspace:
    clean: all

  steps:
  - download: current
    displayName: Download artifacts

  - script: |
      for %%I in (linux-arm linux-arm64 linux-x64 osx-arm64 osx-x64 win-arm64 win-x64 win-x86) do (
        mkdir "$(Build.BinariesDirectory)\%%I"
        xcopy "$(Pipeline.Workspace)\coredistools-%%I\*" "$(Build.BinariesDirectory)\%%I"
      )
    displayName: Stage coredistools binaries

  - script: pack-coredistools.cmd "$(Build.BinariesDirectory)"
    displayName: Pack coredistools into NuGet package

  - publish: $(Build.SourcesDirectory)\artifacts\pkg
    artifact: coredistools-nuget-packages
    displayName: Publish coredistools NuGet package
