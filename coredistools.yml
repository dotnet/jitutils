pr:
  branches:
    include:
    - main
  paths:
    include:
    - eng/*
    - src/coredistools/*
    - build-coredistools.cmd
    - build-coredistools.sh
    - build-tblgen.cmd
    - coredistools.yml
    - pack-coredistools.cmd

trigger:
  branches:
    include:
    - main
  paths:
    include:
    - eng/*
    - src/coredistools/*
    - build-coredistools.cmd
    - build-coredistools.sh
    - build-tblgen.cmd
    - coredistools.yml
    - pack-coredistools.cmd

resources:
  containers:
  - container: linux_x64
    image: mcr.microsoft.com/dotnet-buildtools/prereqs:cbl-mariner-2.0-cross-amd64-20230414190614-8100bf7
  - container: linux_arm
    image: mcr.microsoft.com/dotnet-buildtools/prereqs:cbl-mariner-2.0-cross-arm-20230414190614-8100bf7
  - container: linux_arm64
    image: mcr.microsoft.com/dotnet-buildtools/prereqs:cbl-mariner-2.0-cross-arm64-20230414190614-8100bf7

variables:
  LLVMRepositoryUri: https://github.com/llvm/llvm-project.git
  LLVMSourceBundle: llvm-project.bundle
  LLVMSourceVersion: llvmorg-16.0.1

jobs:

################################ Check out LLVM source tree; publish to artifacts for future jobs

- job: checkout_llvm
  displayName: Checkout LLVM

  pool:
    vmImage: macOS-latest

  workspace:
    clean: all

  steps:
  - checkout: none

  - script: git clone --depth 1 --branch $(LLVMSourceVersion) $(LLVMRepositoryUri) $(Build.SourcesDirectory)
    displayName: Checkout LLVM from Git

  - script: git bundle create $(Build.StagingDirectory)/$(LLVMSourceBundle) HEAD
    displayName: Create bundle

  - publish: $(Build.StagingDirectory)/$(LLVMSourceBundle)
    artifact: $(LLVMSourceBundle)
    displayName: Publish LLVM bundle

################################ Cross-build coredistools for linux-x64, linux-arm, linux-arm64 in CBL-Mariner Docker container

- job: crossbuild_coredistools_linux
  dependsOn: checkout_llvm
  displayName: Build coredistools Linux

  container: $[ variables['ContainerImage'] ]

  pool:
    vmImage: ubuntu-latest

  strategy:
    matrix:
      x64:
        ContainerImage: linux_x64
        CrossRootfsDirectory: /crossrootfs/x64
        TargetOSArchitecture: linux-x64

      arm:
        ContainerImage: linux_arm
        CrossRootfsDirectory: /crossrootfs/arm
        TargetOSArchitecture: linux-arm

      arm64:
        ContainerImage: linux_arm64
        CrossRootfsDirectory: /crossrootfs/arm64
        TargetOSArchitecture: linux-arm64

  workspace:
    clean: all

  steps:
  - template: /eng/download-checkout-llvm.yml

  - script: ./build-coredistools.sh $(TargetOSArchitecture) $(CrossRootfsDirectory)
    displayName: Build coredistools

  - publish: $(Build.SourcesDirectory)/artifacts/$(TargetOSArchitecture)/bin/libcoredistools.so
    artifact: coredistools-$(TargetOSArchitecture)
    displayName: Publish coredistools

################################ Build llvm-tblgen on Mac (x64)

- job: build_tblgen_macos
  dependsOn: checkout_llvm
  displayName: Build llvm-tblgen macOS

  pool:
    vmImage: macOS-latest

  workspace:
    clean: all

  steps:
  - template: /eng/download-checkout-llvm.yml

  - script: ./build-tblgen.sh osx-x64
    displayName: Build llvm-tblgen

  - publish: $(Build.SourcesDirectory)/bin/llvm-tblgen
    artifact: tblgen-macos
    displayName: Publish llvm-tblgen

################################ Build coredistools for macos-x64, macos-arm64

- job: build_coredistools_macos
  dependsOn:
  - checkout_llvm
  - build_tblgen_macos
  displayName: Build coredistools macOS

  pool:
    vmImage: $(VMImage)

  strategy:
    matrix:
      x64:
        TargetOSArchitecture: osx-x64
        VMImage: macOS-latest
      arm64:
        TargetOSArchitecture: osx-arm64
        VMImage: macOS-latest

  workspace:
    clean: all

  steps:
  - template: /eng/download-checkout-llvm.yml

  - script: |
      echo "PATH=$PATH"
      echo "Pipeline.Workspace=$(Pipeline.Workspace)"
      echo "Files in $(Pipeline.Workspace):"
      ls -AFG $(Pipeline.Workspace)
    displayName: Display data before download llvm-tblgen

  - download: current
    artifact: tblgen-macos
    displayName: Download llvm-tblgen

  - script: |
      echo "PATH=$PATH"
      echo "Pipeline.Workspace=$(Pipeline.Workspace)"
      echo "Files in $(Pipeline.Workspace):"
      ls -AFG $(Pipeline.Workspace)
      echo "Files in $(Pipeline.Workspace)/tblgen-macos"
      ls -AFG $(Pipeline.Workspace)/tblgen-macos || echo "Not found"
    displayName: Display data before set PATH

  - script: |
      echo "PATH=$PATH"
      echo "##vso[task.prependpath]$(Pipeline.Workspace)/tblgen-macos"
      echo "PATH=$PATH"
    displayName: Add llvm-tblgen to the PATH

  - script: |
      echo "PATH=$PATH"
      echo "Pipeline.Workspace=$(Pipeline.Workspace)"
      echo "Files in $(Pipeline.Workspace):"
      ls -AFG $(Pipeline.Workspace)
      echo "Files in $(Pipeline.Workspace)/tblgen-macos"
      ls -AFG $(Pipeline.Workspace)/tblgen-macos || echo "Not found"
    displayName: Display data before build coredistools

  #- script: ./build-coredistools.sh $(TargetOSArchitecture)
  #  displayName: Build coredistools
  - script: |
      echo "PATH=$PATH"
      echo "Pipeline.Workspace=$(Pipeline.Workspace)"
      echo "Files in $(Pipeline.Workspace):"
      ls -AFG $(Pipeline.Workspace)
      echo "Files in $(Pipeline.Workspace)/tblgen-macos"
      ls -AFG $(Pipeline.Workspace)/tblgen-macos || echo "Not found"
      ./build-coredistools.sh $(TargetOSArchitecture)
    displayName: Build coredistools

  - publish: $(Build.SourcesDirectory)/artifacts/$(TargetOSArchitecture)/bin/libcoredistools.dylib
    artifact: coredistools-$(TargetOSArchitecture)
    displayName: Publish coredistools

################################ Build llvm-tblgen on Windows

- job: build_tblgen_windows
  dependsOn: checkout_llvm
  displayName: Build llvm-tblgen Windows

  pool:
    vmImage: windows-latest

  workspace:
    clean: all

  steps:
  - template: /eng/download-checkout-llvm.yml

  - script: build-tblgen.cmd
    displayName: Build llvm-tblgen

  - publish: $(Build.SourcesDirectory)\bin\llvm-tblgen.exe
    artifact: tblgen-windows
    displayName: Publish llvm-tblgen

################################ Build coredistools for win-x64, win-x86, win-arm64

- job: build_coredistools_windows
  dependsOn:
  - checkout_llvm
  - build_tblgen_windows
  displayName: Build coredistools Windows

  pool:
    vmImage: windows-latest

  strategy:
    matrix:
      x64:
        TargetOSArchitecture: win-x64
      x86:
        TargetOSArchitecture: win-x86
      arm64:
        TargetOSArchitecture: win-arm64

  workspace:
    clean: all

  steps:
  - template: /eng/download-checkout-llvm.yml

  - download: current
    artifact: tblgen-windows
    displayName: Download llvm-tblgen

  - script: 'echo ##vso[task.prependpath]$(Pipeline.Workspace)\tblgen-windows'
    displayName: Add llvm-tblgen to the PATH

  - script: build-coredistools.cmd $(TargetOSArchitecture)
    displayName: Build coredistools

  - publish: $(Build.SourcesDirectory)\artifacts\$(TargetOSArchitecture)\bin\coredistools.dll
    artifact: coredistools-$(TargetOSArchitecture)
    displayName: Publish coredistools

################################ Build coredistools NuGet packages

- job: build_coredistools_nuget_packages
  dependsOn:
  - crossbuild_coredistools_linux
  - build_coredistools_macos
  - build_coredistools_windows
  displayName: Build coredistools NuGet packages

  pool:
    vmImage: windows-latest

  workspace:
    clean: all

  steps:
  - download: current
    displayName: Download artifacts

  - script: |
      for %%I in (linux-arm linux-arm64 linux-x64 osx-arm64 osx-x64 win-arm64 win-x64 win-x86) do (
        mkdir "$(Build.BinariesDirectory)\%%I"
        xcopy "$(Pipeline.Workspace)\coredistools-%%I\*" "$(Build.BinariesDirectory)\%%I"
      )
    displayName: Stage coredistools binaries

  - script: pack-coredistools.cmd "$(Build.BinariesDirectory)"
    displayName: Pack coredistools into NuGet package

  - publish: $(Build.SourcesDirectory)\artifacts\pkg
    artifact: coredistools-nuget-packages
    displayName: Publish coredistools NuGet package
